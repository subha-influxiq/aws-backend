{"version":3,"sources":["ng://login/lib/login.service.ts","ng://login/lib/api.service.ts","ng://login/lib/login.component.ts","ng://login/lib/material-module.ts","ng://login/lib/sign-up/sign-up.component.ts","ng://login/lib/forget-password/forget-password.component.ts","ng://login/lib/reset-password/reset-password.component.ts","ng://login/lib/login.module.ts"],"names":["LoginService","Injectable","args","providedIn","ApiService","prototype","setServerUrl","value","this","subjectForServerUrl","next","clearServerUrl","getServerUrl","asObservable","setaddEndpoint","subjectForaddEndpointUrl","clearaddEndpoint","getaddEndpoint","setuploadEndpont","subjectForuploadEndpointUrl","clearuploadEndpoint","getuploadEndpoint","setupdateEndpoint","subjectForupdateEndpointUrl","clearupdateEndpoint","getupdateEndpoint","setdeletesingleEndpoint","subjectFordeletesingleEndpointUrl","cleardeletesingleEndpoint","getdeletesingleEndpoint","setupdatestatus_singleEndpoint","subjectForupdatestatusSingleEndpointUrl","clearupdatestatus_singleEndpoint","getupdatestatus_singleEndpoint","setgetdataEndpoint","subjectForGetdataEndpointUrl","cleargetdataEndpoint","getdataEndpoint","isTokenExpired","addData","requestdata","console","log","httpOptions","headers","HttpHeaders","Content-Type","Authorization","accesstoken","_http","post","serverUrl","addendpointUrl","JSON","stringify","pipe","map","res","uploadFile","access-token","uploadEndpointUrl","UpdateData","updateendpointUrl","getData","getdata_endpointUrl","addLogin","forgetPassword","deleteSingleData","deletesingle_endpointUrl","deleteMultipleData","UpdateStatusForSingleData","updatestatus_single_endpointUrl","UpdateStatusForMultipleData","CustomRequest","endpoint","jwtTokenGet","get","HttpClient","CookieService","_authHttp","cookieService","_this","progress","uploaderror","fileservername","Subject","subscriptionServer","subscribe","message","result","subscriptionaddEndpoint","subscriptionuploadEndpoint","subscriptionupdateEndpoint","subscriptiondeletesingleEndpoint","subscriptionupdatestatusSingleEndpoint","subscriptionGetdataEndpoint","LoginComponent","Object","defineProperty","fromTitleVal","fromTitleValue","logoVal","logoValue","buttonNameVal","buttonNameValue","fullUrlVal","serverURL","endpointVal","endpointValue","v","cookieSetValue","routeingUrlval","signUpRouteingUrlValue","forgetRouteingUrlValue","routerStatusval","routerStatusValue","ngOnInit","apiService","setTimeout","loginFormSubmit","x","loginForm","controls","markAsTouched","valid","data","response","status","key","set","item","token","type","router","navigateByUrl","routerNav","formDirective","resetForm","msg","inputUntouched","val","markAsUntouched","forgetpassword","path","signup","customFunction","link","Component","selector","template","FormBuilder","Router","ViewChild","FormGroupDirective","Input","fb","http","project_name","group","email","Validators","compose","required","pattern","password","DemoMaterialModule","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","SignUpComponent","formTitleVal","formTitleValue","serverUrlVal","serverUrlValue","modaleLogoVal","typeval","typevalue","addEndpointVal","addEndpointValue","loginRouteingUrlValue","signUpFormSubmit","signUpForm","allData","source","dialog","open","successModalComponent","width","Url","login","MatDialog","firstname","lastname","onNoClick","dialogRef","close","MatDialogRef","Inject","MAT_DIALOG_DATA","ForgetPasswordComponent","domainUrlVal","domainUrlValue","addEndpointval","forgetPasswordSubmit","forgetPasswordForm","domainUrl","openSnackBar","snackBar","openFromComponent","snackBarComponent","duration","durationInSeconds","MatSnackBar","ResetPasswordComponent","fromTitleNameVal","fromTitleNameValue","machpassword","passwordkye","confirmpasswordkye","passwordInput","confirmpasswordInput","setErrors","notEquivalent","resetPasswordSubmit","resetPasswordForm","accesscode","snackBarResetComponent","ActivatedRoute","route","params","confirmPassword","validator","LoginModule","declarations","imports","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","CommonModule","HttpClientModule","providers","bootstrap","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor() { }\n}\n","import { ElementRef, EventEmitter, Injectable, Input, ViewChild } from '@angular/core';\nimport { switchMap, map, takeWhile } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n// for setting observables to get serverurl and endpointurl from app\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport{CookieService} from 'ngx-cookie-service';\n\n\n@Injectable({   \n  providedIn: 'root'\n})\nexport class ApiService {\n\n  public lengthis;\n  public percentageis;\n  public inprogress;\n  public progress: any = [];\n  public uploadtype;\n  public uploaderror: any = '';\n  public accesstoken:any=this.cookieService.get('jwtToken');\n  // public accesstoken:any='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJleHAiOjE1NjgzNTgyMTAsImlhdCI6MTU2ODI3MTgxMH0.2ltvxVKwfX1uwMOwQ2Zzgp1K2jiaCDj051Wyho0Iw-Q';\n  fileservername: any = [];\n  serverUrl: any;\n  addendpointUrl: any;\n  uploadEndpointUrl:any; //souresh\n  updateendpointUrl: any;\n  deletesingle_endpointUrl: any;\n  updatestatus_single_endpointUrl: any;\n  deletemultiple_endpointUrl: any;\n  updatestatus_multiple_endpointUrl: any;\n  getdata_endpointUrl: any;\n  private subjectForServerUrl = new Subject<any>();\n  private subjectForaddEndpointUrl = new Subject<any>();\n  private subjectForuploadEndpointUrl = new Subject<any>();  //added by souresh\n  private subjectForupdateEndpointUrl = new Subject<any>();\n  private subjectFordeletesingleEndpointUrl = new Subject<any>();\n  private subjectForupdatestatusSingleEndpointUrl = new Subject<any>();\n  private subjectForGetdataEndpointUrl = new Subject<any>();\n  public subscriptionServer: Subscription;\n  public subscriptionaddEndpoint: Subscription;\n  public subscriptionuploadEndpoint: Subscription;   //added by souresh\n  public subscriptionupdateEndpoint: Subscription;\n  public subscriptiondeletesingleEndpoint: Subscription;\n  public subscriptionupdatestatusSingleEndpoint: Subscription;\n  public subscriptionGetdataEndpoint: Subscription;\n\n  constructor(private _http: HttpClient,\n    private _authHttp: HttpClient,private cookieService :CookieService) {\n    this.subscriptionServer = this.getServerUrl().subscribe(message => {\n     let result: any;\n      result = message;\n      if (result != null) {\n        this.serverUrl = result;\n      } else {\n        this.serverUrl = null;\n      }\n    });\n    this.subscriptionaddEndpoint = this.getaddEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.addendpointUrl = result;\n      } else {\n        this.addendpointUrl = null;\n      }\n    });\n    /*********added by souresh***********/\n    this.subscriptionuploadEndpoint=this.getuploadEndpoint().subscribe(message=>{\n      let result:any;\n      result=message;\n        if(result!=null){\n          this.uploadEndpointUrl = result;\n        } else{\n          this.uploadEndpointUrl = null;\n        }\n    })\n    /************souresh end here**************/\n    this.subscriptionupdateEndpoint = this.getupdateEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updateendpointUrl = result;\n      } else {\n        this.updateendpointUrl = null;\n      }\n    });\n    this.subscriptiondeletesingleEndpoint = this.getdeletesingleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.deletesingle_endpointUrl = result;\n      } else {\n        this.deletesingle_endpointUrl = null;\n      }\n    });\n    this.subscriptionupdatestatusSingleEndpoint = this.getupdatestatus_singleEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.updatestatus_single_endpointUrl = result;\n      } else {\n        this.updatestatus_single_endpointUrl = null;\n      }\n    });\n    this.subscriptionGetdataEndpoint = this.getdataEndpoint().subscribe(message => {\n      let result: any;\n      result = message;\n      if (result != null) {\n        this.getdata_endpointUrl = result;\n      } else {\n        this.getdata_endpointUrl = null;\n      }\n    });\n\n    \n  }\n\n  setServerUrl(value: any) {\n    this.subjectForServerUrl.next(value);\n  }\n  public clearServerUrl() {\n    this.subjectForServerUrl.next(null);\n  }\n  public getServerUrl(): Observable<any> {\n    return this.subjectForServerUrl.asObservable();\n  }\n\n  setaddEndpoint(value: any) {\n    this.subjectForaddEndpointUrl.next(value);\n  }\n  public clearaddEndpoint() {\n    this.subjectForaddEndpointUrl.next(null);\n  }\n  public getaddEndpoint(): Observable<any> {\n    return this.subjectForaddEndpointUrl.asObservable();\n  }\n/*****added by souresh******/\n  setuploadEndpont(value:any){\n    this.subjectForuploadEndpointUrl.next(value);\n  }\n  public clearuploadEndpoint(){\n    this.subjectForuploadEndpointUrl.next(null);\n  }\n  public getuploadEndpoint(): Observable <any> {\n    return this.subjectForuploadEndpointUrl.asObservable();\n  }\n   /********souresh end here********/\n\n\n  setupdateEndpoint(value: any) {\n    this.subjectForupdateEndpointUrl.next(value);\n  }\n  public clearupdateEndpoint() {\n    this.subjectForupdateEndpointUrl.next(null);\n  }\n  public getupdateEndpoint(): Observable<any> {\n    return this.subjectForupdateEndpointUrl.asObservable();\n  }\n\n  setdeletesingleEndpoint(value: any) {\n    this.subjectFordeletesingleEndpointUrl.next(value);\n  }\n  public cleardeletesingleEndpoint() {\n    this.subjectFordeletesingleEndpointUrl.next(null);\n  }\n  public getdeletesingleEndpoint(): Observable<any> {\n    return this.subjectFordeletesingleEndpointUrl.asObservable();\n  }\n\n  setupdatestatus_singleEndpoint(value: any) {\n    this.subjectForupdatestatusSingleEndpointUrl.next(value);\n  }\n  public clearupdatestatus_singleEndpoint() {\n    this.subjectForupdatestatusSingleEndpointUrl.next(null);\n  }\n  public getupdatestatus_singleEndpoint(): Observable<any> {\n    return this.subjectForupdatestatusSingleEndpointUrl.asObservable();\n  }\n\n  setgetdataEndpoint(value: any) {\n    this.subjectForGetdataEndpointUrl.next(value);\n  }\n  public cleargetdataEndpoint() {\n    this.subjectForGetdataEndpointUrl.next(null);\n  }\n  public getdataEndpoint(): Observable<any> {\n    return this.subjectForGetdataEndpointUrl.asObservable();\n  }\n\n\n\n  isTokenExpired() {\n\n    // const helper = new JwtHelperService();\n    // const decodedToken = helper.decodeToken(localStorage.getItem('id_token'));\n    // var isIdTokenExpired = helper.isTokenExpired(localStorage.getItem('id_token'));\n    // console.log('refresh_token',localStorage.getItem('refresh_token'))\n    // const isRefreshTokenExpired = helper.isTokenExpired(localStorage.getItem('refresh_token'));\n    // console.log('id_token isExpired:',isIdTokenExpired)\n    // console.log('refresh_token isExpired:',isRefreshTokenExpired)\n  }\n\n  addData(requestdata: any) {\n    console.log('in adddata apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log('httpoptions',httpOptions,this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*******added by souresh************/\n  uploadFile(requestdata:any){\n    const httpOptions={\n        headers: new HttpHeaders({\n          'Content-Type':'application/json',\n          'access-token':this.accesstoken          //hard code written access-token(temp)\n        })\n    };\n    var result=this._http.post(this.serverUrl + this.uploadEndpointUrl,JSON.stringify(requestdata),httpOptions).pipe(map(res=>res));\n    return result;\n  }\n  /*******souresh end here********/\n  UpdateData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updateendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  getData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.getdata_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n/*************** Added by himadri start here ***************/ \n  addLogin(requestdata: any) {\n    console.log('in addLogin apiservice');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n        // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n      })\n    };\n\n    // console.log(this.serverUrl,requestdata);\n    var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  /*************** Added by himadri end here ***************/ \n\n/*************** Added by himadri start here ***************/ \nforgetPassword(requestdata: any) {\n  console.log('in forgetPassword apiservice');\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': this.accesstoken          //hard code written access-token(temp)\n    })\n  };\n\n  // console.log(this.serverUrl,requestdata);\n  var result = this._http.post(this.serverUrl + this.addendpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n  return result;\n}\n/*************** Added by himadri end here ***************/ \n\n\n  deleteSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  deleteMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.deletesingle_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForSingleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  UpdateStatusForMultipleData(requestdata: any) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl + this.updatestatus_single_endpointUrl+'many', JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n  CustomRequest(requestdata: any, endpoint:any ) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'access-token': this.accesstoken\n      })\n    };\n    var result = this._http.post(this.serverUrl +endpoint, JSON.stringify(requestdata), httpOptions).pipe(map(res => res));\n    return result;\n  }\n\n  jwtTokenGet() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':'application/json'\n      })\n    };\n    var result = this._http.get(this.serverUrl + 'gettemptoken').pipe(map(res => res));\n    return result;\n  }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators, MinLengthValidator, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n\n\n@Component({\n  selector: 'lib-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  public message: any = '';\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public fromTitleValue: any = '';\n  public serverURL: any = '';\n  public signUpRouteingUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public routerStatusValue: any = '';\n  public endpointValue: any;\n  public logoValue: any = '';\n  public cookieSetValue: any = '';\n  public buttonNameValue: any = '';\n\n  @Input()         // Set the project name\n  set fromTitle(fromTitleVal: any) {\n    this.fromTitleValue = (fromTitleVal) || '<no name set>';\n    this.fromTitleValue = fromTitleVal;\n\n  }\n  @Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n@Input()\nset buttonName (buttonNameVal :any){\n  this.buttonNameValue = (buttonNameVal) || '<no name set>';\n  this.buttonNameValue = buttonNameVal\n}\n\n  @Input()        // setting the server url from project\n  set fullUrl(fullUrlVal: any) {\n    this.serverURL = (fullUrlVal) || '<no name set>';\n    this.serverURL = fullUrlVal;\n\n  }\n  @Input()\n\n  set endpoint(endpointVal: any) {\n    this.endpointValue = endpointVal;\n  }\n\n@Input()\n\npublic set cookieSet(v : any) {\n  this.cookieSetValue = v;\n  // console.log(this.cookieSetValue.cookie);\n  // for (const key in this.cookieSetValue.cookie) {\n            \n  //   console.log(this.cookieSetValue.cookie[key]);\n  // }\n\n}\n\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n    console.log(this.signUpRouteingUrlValue)\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n    console.log(this.forgetRouteingUrlValue)\n  }\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set routerStatus(routerStatusval: any) {\n    this.routerStatusValue = (routerStatusval) || '<no name set>';\n    this.routerStatusValue = routerStatusval;\n    // console.log(this.routerStatusValue);\n    // console.log(this.routerStatusValue.data.length);\n  }\n\n\n\n\n  public loginForm: FormGroup;\n  public project_name: any = '';\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public apiService: ApiService, public cookieService: CookieService) {\n    this.loginForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      password: ['', Validators.required]\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverURL);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.endpointValue);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n\n/********* Login Form Submit start here*********/ \n  loginFormSubmit() {\n    let x: any;\n/****************** test*******************/ \n// for (const key in this.cookieSetValue.cookie) {\n//   console.log(this.cookieSetValue.cookie[key].type);\n//   if (result.token == this.cookieSetValue.cookie[key].type) {\n//     console.log('+++++++++++++++');\n//   }\n// }\n\n\n    // use for validation checking\n\n    for (x in this.loginForm.controls) {\n      this.loginForm.controls[x].markAsTouched();\n    }\n\n    if (this.loginForm.valid) {\n      let data: any = this.loginForm.value;\n      this.apiService.addLogin(data).subscribe((response) => {\n        // console.log(response);\n        let result: any = {};\n        result = response;\n      //   let cookiekeyarr:any = [];\n      //   let cookievaluearr:any = [];\n      //   for(let j in result.item){\n      //     // console.log(Object.values(result.item[j]));\n      //     // cookiekeyarr = Object.keys(result.item[j]);\n      //     // cookievaluearr = Object.values(result.item[j]);\n      //     cookievaluearr.push(Object.keys(result.item[j]), Object.values(result.item[j]));\n      //   }\n      //   // console.log('cookiekeyarr'+cookiekeyarr);\n      //   console.log(cookievaluearr);\n      // //   setTimeout(()=>{\n      //   // for (let key in cookiekeyarr){\n      //     for(let value in cookievaluearr[0]){\n      //       console.log('hi'+value);\n      //       // this.cookieService.set(cookiekeyarr[key],cookievaluearr[value]);\n      //     }\n      //   // }\n      // // },2000);\n      //   // setTimeout(()=>{\n      //   //   console.log(this.cookieService.getAll());\n      //   // },4000);\n        \n\n        if (result.status == \"success\") {\n          // for (const key in this.cookieSetValue.cookie) {\n          //   console.log(this.cookieSetValue.cookie[key].type);\n          //   if (result == this.cookieSetValue.cookie[key].type) {\n          //     console.log('+++++++++++++++');\n          //   }\n          // }\n          this.cookieService.set('user_details', JSON.stringify(result.item[0]));\n          this.cookieService.set('jwtToken', result.token);\n\n          setTimeout(() => {\n            // console.log(this.cookieService.getAll());\n          }, 1000);\n\n          // console.log('result')\n          // console.log(result.item[0].type)\n          for (const key in this.routerStatusValue.data) {\n            // console.log(this.routerStatusValue.data[key].type);\n\n            if (result.item[0].type === this.routerStatusValue.data[key].type) {\n              this.router.navigateByUrl('/' + this.routerStatusValue.data[key].routerNav)     // navigate to dashboard url \n            }\n          }\n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n          this.message = '';\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      });\n    }\n\n  }\n\n\n  inputUntouched(val: any) {\n    this.loginForm.controls[val].markAsUntouched();\n  }\n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue.path);\n  }\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue.path);\n  }\n\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2019 Google Inc. All Rights Reserved.\n Use of this source code is governed by an MIT-style license that\n can be found in the LICENSE file at http://angular.io/license */\n","import { Component, OnInit, Input, Inject, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';\nimport { ApiService } from '../api.service';\n\n\n\nexport interface DialogData {\n  value: string;\n  Url: any;\n}\n\n@Component({\n  selector: 'lib-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n  public value: any='';\n  public link: any='';\n  public Url: any='';\n  public message: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public formTitleValue: any = '';\n  public serverUrlValue: any = '';\n  public forgetRouteingUrlValue: any = '';\n  public loginRouteingUrlValue: any = '';\n  public addEndpointValue: any = '';\n  public logoValue: any = '';\n  public typevalue: any = '';\n  public buttonNameValue: any = '';\n\n  @Input()         // Set the Form name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n    // console.log(this.formTitleValue);\n\n  }\n\n  @Input()\n  set buttonName (buttonNameVal :any){\n    this.buttonNameValue = (buttonNameVal) || '<no name set>';\n    this.buttonNameValue = buttonNameVal\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    // console.log(this.serverUrlValue);\n\n  }\n@Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n@Input()      // set the from logo\n\nset modaleLogo(modaleLogoVal : any) {\n  this.link = modaleLogoVal;\n}\n\n@Input()\nset userType(typeval: any) {\n  this.typevalue = typeval;\n}\n\n\n  @Input()        // set the endpoint And source\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n    console.log(this.addEndpointValue)\n  }\n\n\n  @Input()          // setting the navigate By Forget Password Url from project\n  set forgetRouteingUrl(routeingUrlval: any) {\n    this.forgetRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.forgetRouteingUrlValue = routeingUrlval;\n    // console.log(this.forgetRouteingUrlValue);\n  }\n\n  @Input()          // setting the navigate By login Url from project\n  set loginRouteingUrl(routeingUrlval: any) {\n    this.loginRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.loginRouteingUrlValue = routeingUrlval;\n    // console.log(this.loginRouteingUrlValue);\n  }\n\n\n\n  public signUpForm: FormGroup;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public dialog: MatDialog, public apiService: ApiService) {\n    this.signUpForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n\n/********* Sign Up Form Submit start here*********/ \n  signUpFormSubmit() {\n    // use for validation checking\n    for (let x in this.signUpForm.controls) {\n      this.signUpForm.controls[x].markAsTouched();\n    }\n    if (this.signUpForm.valid) {\n      // let link: any = this.fullUrlValue;\n      let allData: any = this.signUpForm.value;\n      allData.type = this.typevalue;\n      console.log(allData);\n\n      let data: any = {\n        'data': allData,\n        \"source\": this.addEndpointValue.source\n      };\n      console.log(data);\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n\n        if (result.status == \"success\") {\n          const dialogRef = this.dialog.open(successModalComponent, {\n            width: '250px',\n            data: {value: result.status, Url: this.link}\n          });\n          // this.router.navigateByUrl('/' + )     // navigate to dashboard url \n\n\n          // this is use for reset the from\n          this.formDirective.resetForm();\n        } else {\n          // display error message on html\n          this.message = result.msg;\n        }\n      })\n\n    }\n  }\n\n\n/********* Sign Up Form Submit end here*********/ \n\n  // This is use for navigate this component to forget component \n  forgetpassword() {\n    this.router.navigateByUrl('/' + this.forgetRouteingUrlValue.path);\n  }\n\n\n  // This is use for navigate this component to forget component \n  login() {\n    this.router.navigateByUrl('/' + this.loginRouteingUrlValue.path);\n  }\n\n  inputUntouched(val: any) {\n    this.signUpForm.controls[val].markAsUntouched();\n  }\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n}\n\n\n@Component({\n  selector: 'successModal',\n  templateUrl: '../successModal.html',\n\n})\nexport class successModalComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<successModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      console.log(data)\n     }\n\n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n\n\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'lib-forget-password',\n  templateUrl: './forget-password.component.html',\n  styleUrls: ['./forget-password.component.css']\n})\nexport class ForgetPasswordComponent implements OnInit {\n  public message: any = '';\n  public buttonNameValue: any = '';\n\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  public forgetPasswordForm: FormGroup;\n  public formTitleValue: any = '';          // This is From title\n  public serverUrlValue: any = '';          //  This is Server url\n  public signUpRouteingUrlValue: any = '';  // setting the navigate By Sign Up Url from project\n  public loginRouteingUrlValue: any = '';  // setting the navigate By login Url from project\n  private domainUrlValue: any = '';          // This is reset password url\n  public addEndpointValue: any = '';        // This is endpoint url\n  public logoValue: any = '';               // This is from logo url\n  public durationInSeconds = 5;             // This is SnackBar set time\n\n\n  @Input()\nset buttonName (buttonNameVal :any){\n  this.buttonNameValue = (buttonNameVal) || '<no name set>';\n  this.buttonNameValue = buttonNameVal\n}\n\n  @Input()         // Set the project email Doman URL\n  set domainUrl(domainUrlVal: any) {\n    this.domainUrlValue = (domainUrlVal) || '<no name set>';\n    this.domainUrlValue = domainUrlVal;\n    // console.log(this.domanUrlValue);\n  }\n  @Input()         // Set the project name\n  set formTitle(formTitleVal: any) {\n    this.formTitleValue = (formTitleVal) || '<no name set>';\n    this.formTitleValue = formTitleVal;\n\n  }\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n\n  }\n\n  @Input()      // set the from logo\n\n  set logo(logoVal: any) {\n    this.logoValue = logoVal;\n  }\n\n  @Input()          // set the endpoint and source\n\n  set addEndpoint(addEndpointval: any) {\n    this.addEndpointValue = addEndpointval;\n  }\n\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set signUpRouteingUrl(routeingUrlval: any) {\n    this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.signUpRouteingUrlValue = routeingUrlval;\n    // console.log(this.signUpRouteingUrlValue)\n  }\n\n  @Input()          // setting the navigate By Sign Up Url from project\n  set loginRouteingUrl(routeingUrlval: any) {\n    this.loginRouteingUrlValue = (routeingUrlval) || '<no name set>';\n    this.loginRouteingUrlValue = routeingUrlval;\n    // console.log(this.loginRouteingUrlValue)\n  }\n\n  constructor(\n    public fb: FormBuilder,\n    public router: Router,\n    public apiService: ApiService,\n    private snackBar: MatSnackBar\n  ) {\n\n\n\n    this.forgetPasswordForm = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.pattern(/^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/)])],\n\n    });\n\n\n\n\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       //  Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);        //  set the server url\n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       //  Clear the endpoint\n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);   //  set the endpoint\n    }, 50);\n  }\n\n  /********* Forget password  Form Submit start here*********/\n  forgetPasswordSubmit() {\n    let x: any;\n\n    //  This for-loop use for from blank or properly validated checking  \n    for (x in this.forgetPasswordForm.controls) {\n      this.forgetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.forgetPasswordForm.valid) {    //    validation checking\n\n      // this.openSnackBar();              // open snack-bar function\n\n      let link: any = this.serverUrlValue;\n      let data: any = this.forgetPasswordForm.value;\n\n      data.domainUrl = this.domainUrlValue;\n\n      this.apiService.forgetPassword(data).subscribe((response) => {\n        // console.log(response);\n        let result: any = {};\n        result = response;\n\n        if (result.status == \"success\") {\n          // this.openSnackBar();             // open snack-bar function\n          // this is use for reset the from\n          this.formDirective.resetForm();\n          this.message = '';         // clear the from\n        } else {\n\n          // display error message on html\n          this.message = result.msg;      // show the error message\n\n        }\n      });\n    }\n  }\n\n  /********* Forget password  Form Submit end here*********/\n\n\n  /********* openSnackBar function open start here*********/\n\n\n  openSnackBar() {\n    this.snackBar.openFromComponent(snackBarComponent, {\n      duration: this.durationInSeconds * 1000,\n    });\n  }\n /********* openSnackBar function open end here*********/\n\n\n  // This is use for navigate this component to sign-Up component \n  signup() {\n    this.router.navigateByUrl('/' + this.signUpRouteingUrlValue);\n  }\n\n    // This is use for navigate this component to login component \n    login() {\n      this.router.navigateByUrl('/' + this.loginRouteingUrlValue);\n    }\n\n  inputUntouched(val: any) {\n    this.forgetPasswordForm.controls[val].markAsUntouched();\n  }\n\n\n  customFunction(link: any) {\n    this.router.navigateByUrl('/'+ link);\n  }\n\n\n}\n\n\n@Component({\n  selector: 'snack-bar-modale',\n  templateUrl: 'forget-passwordModale.html',\n  styles: [`\n    .example {\n      color: aliceblue;\n      background-color: yellowgreen;\n    }\n  `],\n})\nexport class snackBarComponent { }\n","import { Component, OnInit, Input, ViewChild, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup, FormGroupDirective } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../api.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'lib-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\n\n\n\nexport class ResetPasswordComponent implements OnInit {\n  //   FormGroupDirective: It is a directive that binds an existing FormGroup to a DOM element.\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n  public resetPasswordForm: FormGroup;\n  public fromTitleNameValue: any = '';\n  public serverUrlValue: any = '';\n  public message: any = '';\n  public addEndpointValue: any = '';\n\n  public logoValue: any = '';\n  // public signUpRouteingUrlValue: any = '';\n  public durationInSeconds = 5;             // This is SnackBar set time\n\n\n  @Input()         // Set the Form name\n  set fromTitleName(fromTitleNameVal: any) {\n    this.fromTitleNameValue = (fromTitleNameVal) || '<no name set>';\n    this.fromTitleNameValue = fromTitleNameVal;\n    console.log(this.fromTitleNameValue);\n\n  }\n\n\n  @Input()        // setting the server url from project\n  set serverUrl(serverUrlVal: any) {\n    this.serverUrlValue = (serverUrlVal) || '<no name set>';\n    this.serverUrlValue = serverUrlVal;\n    console.log(this.serverUrlValue);\n\n  }\n\n  @Input()        // set the endpoint and source\n\n  public set addEndpoint(addEndpointVal: any) {\n    this.addEndpointValue = addEndpointVal;\n  }\n\n  @Input()      // set the from logo\n\nset logo(logoVal : any) {\n  this.logoValue = logoVal;\n}\n\n\n  // @Input()          // setting the navigate By Sign Up Url from project\n  // set signUpRouteingUrl(routeingUrlval: any) {\n  //   this.signUpRouteingUrlValue = (routeingUrlval) || '<no name set>';\n  //   this.signUpRouteingUrlValue = routeingUrlval;\n  //   console.log(this.signUpRouteingUrlValue);\n  // }\n  public accesscode: string;\n\n  constructor(public fb: FormBuilder, public http: HttpClient, public router: Router, public route: ActivatedRoute, public apiService: ApiService,  private snackBar: MatSnackBar) {\n\n    this.route.params.subscribe(params => {\n\n      this.accesscode = params['token'];\n      console.log(this.accesscode);\n    })\n\n    this.resetPasswordForm = this.fb.group({\n      // password: ['',  Validators.compose([Validators.required, Validators.minLength(4)])],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n    }, {\n      validator: this.machpassword('password', 'confirmPassword')\n    })\n  }\n\n  ngOnInit() {\n    this.apiService.clearServerUrl();       // Clear the server url\n    setTimeout(() => {\n      this.apiService.setServerUrl(this.serverUrlValue);       // set the server url \n    }, 50);\n    // console.log(this.serverURL);\n\n\n    this.apiService.clearaddEndpoint();       // clear the endpoint \n    setTimeout(() => {\n      this.apiService.setaddEndpoint(this.addEndpointValue.endpoint);       // set the endpoint\n    }, 50);\n    // console.log(this.addEndpointData.endpoint);\n\n  }\n  //  this function is use for mach password and confirm Password \n\n  machpassword(passwordkye: string, confirmpasswordkye: string) {\n    return (group: FormGroup) => {\n      let passwordInput = group.controls[passwordkye],\n        confirmpasswordInput = group.controls[confirmpasswordkye];\n      if (passwordInput.value !== confirmpasswordInput.value) {\n        return confirmpasswordInput.setErrors({ notEquivalent: true });\n      }\n      else {\n        return confirmpasswordInput.setErrors(null);\n      }\n    };\n  }\n\n\n\n/********* Reset Password Form Submit start here*********/ \n  resetPasswordSubmit() {\n    console.log(this.resetPasswordForm.value);\n    let x: any;\n    for (x in this.resetPasswordForm.controls) {\n      this.resetPasswordForm.controls[x].markAsTouched();\n    }\n    if (this.resetPasswordForm.valid) {\n      let data1: any = { \"password\": this.resetPasswordForm.value.password, \"accesscode\": this.accesscode }\n      let data: any = {\n        'data': data1,\n        \"source\": this.addEndpointValue.source\n      }\n\n\n      // data.accesscode = this.accesscode;\n\n      this.apiService.addData(data).subscribe((response) => {\n        let result: any = {};\n        result = response;\n        console.log(result);\n        if (result.status == \"success\") {\n          this.openSnackBar();\n          this.formDirective.resetForm();       // Use for reset the form\n          this.message = '';\n        } else {\n          this.message = result.msg;\n        }\n\n      })\n    }\n  }\n\n\n  openSnackBar() {\n    this.snackBar.openFromComponent(snackBarResetComponent, {\n      duration: this.durationInSeconds * 1000,\n    });\n  }\n\n\n/********* Reset Password Form Submit end here*********/ \n\n\n  inputUntouched(val: any) {\n    this.resetPasswordForm.controls[val].markAsUntouched();\n  }\n\n\n\n\n}\n\n@Component({\n  selector: 'snack-bar-modale',\n  template: `Password changed successfully`,\n  styles: [`\n    .example {\n      color: aliceblue;\n      background-color: yellowgreen;\n    }\n  `],\n})\nexport class snackBarResetComponent { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { LoginComponent } from './login.component';\nimport { DemoMaterialModule } from './material-module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SignUpComponent, successModalComponent } from './sign-up/sign-up.component';\nimport { ForgetPasswordComponent, snackBarComponent } from './forget-password/forget-password.component';\nimport { ResetPasswordComponent, snackBarResetComponent } from './reset-password/reset-password.component';\nimport { ApiService } from './api.service';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignUpComponent,\n    ForgetPasswordComponent,\n    ResetPasswordComponent,\n    successModalComponent,\n    snackBarComponent,\n    snackBarResetComponent,\n    // commonModalComponent\n\n  ],\n  imports: [\n    DemoMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [LoginComponent, SignUpComponent, ForgetPasswordComponent, ResetPasswordComponent],\n  providers: [ApiService],\n  bootstrap: [],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],\n  entryComponents: [ successModalComponent, snackBarComponent, snackBarResetComponent]\n})\nexport class LoginModule { }\n"]}